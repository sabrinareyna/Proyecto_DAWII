DROP DATABASE IF EXISTS pedidos_bd;
CREATE DATABASE pedidos_bd;
USE pedidos_bd;

CREATE TABLE ESTADO_PEDIDO (
    CODESTADO INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    NOMESTADO VARCHAR(50) NOT NULL
);

CREATE TABLE PEDIDO (
    CODPEDIDO INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    CODUSUARIO INT NOT NULL, 
    FECPED DATE NOT NULL,
    PRECIOTOTAL DECIMAL(10,2) NOT NULL,
    CODESTADO INT NOT NULL,
    ESTPED TINYINT(1) NOT NULL,
    FOREIGN KEY (CODESTADO) REFERENCES ESTADO_PEDIDO(CODESTADO)
);

CREATE TABLE DETALLEPEDIDO (
    CODPEDIDO INT NOT NULL,
    CODPRODUCTO INT NOT NULL, 
    PREUNI DECIMAL(10, 2) NOT NULL,
    CANTIDAD INT NOT NULL,
    PRIMARY KEY(CODPEDIDO, CODPRODUCTO),
    FOREIGN KEY (CODPEDIDO) REFERENCES PEDIDO(CODPEDIDO)
);

/* ESTADO PEDIDO */
INSERT INTO ESTADO_PEDIDO (NOMESTADO) VALUES ('Pendiente');
INSERT INTO ESTADO_PEDIDO (NOMESTADO) VALUES ('Pagado');
INSERT INTO ESTADO_PEDIDO (NOMESTADO) VALUES ('Preparado');
INSERT INTO ESTADO_PEDIDO (NOMESTADO) VALUES ('Procesado');
INSERT INTO ESTADO_PEDIDO (NOMESTADO) VALUES ('Cancelado');
INSERT INTO ESTADO_PEDIDO (NOMESTADO) VALUES ('Entregado');

/* PEDIDO */
-- PEDIDO 1 (CODUSUARIO 6 = Juan)
INSERT INTO PEDIDO (CODUSUARIO, FECPED, PRECIOTOTAL, CODESTADO, ESTPED) VALUES
(6, '2025-06-01', 1699.97, 2, 1); -- 1x MacBook Air (1199.99) + 2x AirPods Pro (2 * 249.99)

-- PEDIDO 2 (CODUSUARIO 7 = María)
INSERT INTO PEDIDO (CODUSUARIO, FECPED, PRECIOTOTAL, CODESTADO, ESTPED) VALUES
(7, '2025-06-05', 689.95, 3, 1); -- 1x Xiaomi Note 13 (499.99) + 3x Sensor (3 * 19.99) + 1x HP Sprocket (129.99)

/* DETALLEPEDIDO */
-- Detalles del PEDIDO 1 (CODPEDIDO 1)
INSERT INTO DETALLEPEDIDO (CODPEDIDO, CODPRODUCTO, PREUNI, CANTIDAD)
VALUES (1, 13, 1199.99, 1); -- ID 13: MacBook Air M2
INSERT INTO DETALLEPEDIDO (CODPEDIDO, CODPRODUCTO, PREUNI, CANTIDAD)
VALUES (1, 25, 249.99, 2);  -- ID 25: AirPods Pro 2da Gen

-- Detalles del PEDIDO 2 (CODPEDIDO 2)
INSERT INTO DETALLEPEDIDO (CODPEDIDO, CODPRODUCTO, PREUNI, CANTIDAD)
VALUES (2, 3, 499.99, 1);   -- ID 3: Xiaomi Redmi Note 13 Pro+
INSERT INTO DETALLEPEDIDO (CODPEDIDO, CODPRODUCTO, PREUNI, CANTIDAD)
VALUES (2, 51, 19.99, 3);   -- ID 51: Xiaomi Sensor de Temperatura y Humedad
INSERT INTO DETALLEPEDIDO (CODPEDIDO, CODPRODUCTO, PREUNI, CANTIDAD)
VALUES (2, 64, 129.99, 1);  -- ID 64: HP Sprocket

select*From PEDIDO;
select*From DETALLEPEDIDO;
-- ---------------------------------------------------
-- PROCEDIMIENTOS
-- ---------------------------------------------------
-- -------------------------------------
--          ESTADO_PEDIDO            --
-- -------------------------------------

DELIMITER $$
CREATE PROCEDURE USP_SELECT_ESTADOS()
BEGIN
	 SELECT
		 E.CODESTADO AS `Value`,
		 E.NOMESTADO AS `Name`
	FROM ESTADO_PEDIDO E;
END$$
DELIMITER ;

-- -------------------------------------
--             PEDIDO                --
-- -------------------------------------

-- SP LISTAR PEDIDO (Adaptado para Microservicios: NO hay JOIN a USUARIO)
DROP PROCEDURE IF EXISTS USP_GET_PEDIDO;
DELIMITER $$
CREATE PROCEDURE USP_GET_PEDIDO()
BEGIN
	SELECT
		P.CODPEDIDO,
		P.FECPED,
		P.CODUSUARIO, -- Necesario para buscar el nombre en ms.usuario
		P.PRECIOTOTAL,
		E.NOMESTADO,
        P.ESTPED AS estPed,
		SUM(D.CANTIDAD) AS CANTIDADTOTAL
	FROM PEDIDO P
	INNER JOIN ESTADO_PEDIDO E ON E.CODESTADO = P.CODESTADO
	INNER JOIN DETALLEPEDIDO D ON P.CODPEDIDO = D.CODPEDIDO
	GROUP BY
		P.CODPEDIDO,
		P.FECPED,
		P.CODUSUARIO,
		P.PRECIOTOTAL,
		E.NOMESTADO,
        P.ESTPED
	ORDER BY
		ABS(DATEDIFF(P.FECPED, NOW())) ASC,
		P.PRECIOTOTAL DESC;
END$$
DELIMITER ;


-- SP GET ONE PEDIDO (Adaptado para Microservicios: NO hay JOIN a USUARIO)
DELIMITER $$
CREATE PROCEDURE USP_GET_ONE_PEDIDO(IN CODPEDIDO INT)
BEGIN
	SELECT
		A.CODPEDIDO,
		A.CODUSUARIO, -- Necesario para buscar el nombre en ms.usuario
		A.FECPED,
		A.PRECIOTOTAL,
		A.CODESTADO,
		A.ESTPED
	FROM PEDIDO A
	WHERE A.CODPEDIDO = CODPEDIDO
	ORDER BY A.FECPED DESC;
END$$
DELIMITER ;


-- SP GUARDA CAB+DETALLE (Se mantiene)
DELIMITER $$
CREATE PROCEDURE USP_INSERT_PEDIDODETALLE(
    IN p_CODUSUARIO INT,
    IN p_FECPED DATE,
    IN p_PRECIOTOTAL DECIMAL(10,2),
    IN p_CODESTADO INT,
    IN p_ESTPED TINYINT(1),
    IN p_DETALLE JSON
)
BEGIN
    DECLARE CODPEDIDO INT;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error al insertar pedido';
    END;

    START TRANSACTION;

    INSERT INTO PEDIDO (CODUSUARIO, FECPED, PRECIOTOTAL, CODESTADO, ESTPED)
    VALUES (p_CODUSUARIO, p_FECPED, p_PRECIOTOTAL, p_CODESTADO, p_ESTPED);

    SET CODPEDIDO = LAST_INSERT_ID();

    IF JSON_LENGTH(p_DETALLE) > 0 THEN
        INSERT INTO DETALLEPEDIDO (CODPEDIDO, CODPRODUCTO, PREUNI, CANTIDAD)
        SELECT
            CODPEDIDO,
            d.CODPRODUCTO,
            d.PREUNI,
            d.CANTIDAD
        FROM JSON_TABLE(
            p_DETALLE,
            '$[*]' COLUMNS (
                CODPRODUCTO INT PATH '$.CODPRODUCTO', -- ID externo
                PREUNI DECIMAL(10,2) PATH '$.PREUNI',
                CANTIDAD INT PATH '$.CANTIDAD'
            )
        ) AS d;
    END IF;

    COMMIT;
END$$
DELIMITER ;


-- SP ACTUALIZAR EL ESTADO PEDIDO (Se mantiene)
DELIMITER $$
CREATE PROCEDURE `USP_UPDATE_PEDIDO`(
	IN p_CODPEDIDO INT,
	IN p_CODESTADO INT
)
BEGIN
	UPDATE PEDIDO
	SET CODESTADO = p_CODESTADO,
		ESTPED = 1
	WHERE CODPEDIDO = p_CODPEDIDO;
END$$
DELIMITER ;

-- PROC PARA ELIMINAR EL PEDIDO (Se mantiene)
DELIMITER $$
CREATE PROCEDURE `USP_DELETE_PEDIDO`(IN p_codPedido  INT)
BEGIN
UPDATE PEDIDO
SET CODESTADO = 5,
    ESTPED = 0
WHERE CODPEDIDO = p_codPedido ;
END$$
DELIMITER ;

-- -------------------------------------
--       DETALLEPEDIDO               --
-- -------------------------------------

-- SP GET PRODUCTOS POR PEDIDO (Adaptado: SÓLO DETALLE, no JOIN a PRODUCTO)
DELIMITER $$
CREATE PROCEDURE USP_GET_PRODUCTOS_POR_PEDIDO(IN CODPEDIDO INT)
BEGIN
    SELECT
        D.CODPRODUCTO, -- Solo se devuelve el ID del producto
        D.PREUNI,
        D.CANTIDAD
    FROM DETALLEPEDIDO D
    WHERE D.CODPEDIDO = CODPEDIDO;
END$$
DELIMITER ;

